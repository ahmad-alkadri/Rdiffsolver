% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/funcs_diffs_implicit_reqs.R
\name{mdfimpdiffxtreq}
\alias{mdfimpdiffxtreq}
\title{1D diffusion, boundary constant, FD implicit
for specific space (x) and time (t) point(s)}
\usage{
mdfimpdiffxtreq(D,Nx,Nt,l,T,C_i=0,C_f=1,xreq,treq)
}
\arguments{
\item{D}{Coefficient of diffusion, constant}

\item{Nx}{number of points in space (x)}

\item{Nt}{number of points in time (t)}

\item{l}{half-length of the slab, usually in cm}

\item{T}{Total calculated diffusion time, usually in seconds}

\item{C_i}{Initial concentration value inside the slab}

\item{C_f}{Dirichlet boundary condition,
final concentration coming from the outside of the slab,
with one or two elements. If there is only one element,
the two sides of the slab (x = -l and x = l) will have
the same C_f. If there are
two elements, the first element (C_f[1]) will be on
x = -l while the second one will be on x = l.}

\item{xreq}{requested x point(s)}

\item{treq}{requested t point(s)}
}
\value{
A matrix with Nt number of row and
{length(xreq)} number of column, profiling the diffusion.
}
\description{
Function to solve diffusion equation
using finite difference method, backward euler or
implicit scheme, applied in the condition where:
a) the diffusion occurs inside a slab of material unidimensionally,
or only along one axis, b) the coefficient of diffusion is constant,
and c) the boundary conditions are constant. It will return
the solution values for the requested space (x)
and time (t) point(s).
}
\examples{
C_i = 0.00 # Initial concentration inside the slab
C_f = 1.00	# Final concentration coming from outside
D = 5e-7 # Coefficient of diffusion, cm^2/s
Nt = 100 # points in time
Nx = 20 # points in space
l = 0.25 # half-thickness of the slab, in cm
T = 432000 # Total measured time in seconds (~5 days)
xreq = seq(-0.25,0,length.out = 20) # requested space (x) points
treq = seq(1e2,1e5,length.out = 40) # requested time (t) points
ureq <- mdfimpdiffxtreq(D,Nx,Nt,l,T,C_i,C_f,xreq,treq)

# Using plotly for plotting a contour plot
library(plotly)

df.list <- list(x = xreq,
                y = treq,
                z = ureq)

plot_ly() \%>\%
    add_contour(x = df.list$x, y = df.list$y, z = df.list$z) \%>\%
    layout(title = "Contour plot diffusion",
           xaxis = list(title = "Requested x points (cm)"),
           yaxis = list(title = "t (s)"))
}
